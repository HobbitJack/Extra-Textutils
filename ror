#!/usr/bin/python
# reorder fields in a file

import getopt
import stat
import os
import sys

SEPARATOR = "\t"
REVERSE = False
FIELDS = False
FIRST = []
LAST = []
DELETE = []
INTERLEAVE = None

short_options = "d:f:iIl:rs:hv"
long_options = [
    "delete=",
    "first=",
    "interleave",
    "deinterleave",
    "last=",
    "reverse",
    "separator=",
    "help",
    "version",
]

try:
    options, positional_arguments = getopt.gnu_getopt(
        sys.argv[1:], short_options, long_options
    )
except getopt.GetoptError as error:
    print(f"ror: '-{error.opt}': Option not recognized", file=sys.stderr)
    sys.exit(1)

for option in options:
    argument = option[1]
    option = option[0]

    if option == "-h" or option == "--help":
        print("Usage: ror [OPTION]... [FIELD]... [FILE]")
        print("Re-order fields in a file")
        print()
        print("  -d, --delete=FIELDS          delete FIELDS")
        print("  -f, --first=FIELDS           move FIELDS to the start of each row")
        print(
            "  -i, --interleave             interleave first and second half of fields"
        )
        print("  -I, --deinterleave           deinterleave fields into two halves")
        print("  -l, --last=FIELDS            move FIELDS to the end of each row")
        print("  -r, --reverse                reverse order of all fields ")
        print(
            "  -s, --separator=SEPARATOR    use SEPARATOR instead of tab to separate fields"
        )
        print("  -h, --help                   display this help and exit")
        print("  -v, --version                display version information and exit")
        print()
        print("For full documentation, try 'man ror'.")
        sys.exit(0)
    elif option == "-v" or option == "--version":
        print("ror (Extra Textutils) v1.0.0")
        print("Copyright (C) 2024-2025 HobbitJack.")
        print(
            "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
        )
        print("This is free software: you are free to change and redistribute it.")
        print("There is NO WARRANTY, to the extent permitted by law.")
        print()
        print("Written by HobbitJack.")
        sys.exit(0)
    elif option == "-d" or option == "--delete":
        try:
            for field in argument.split(","):
                if "-" in field:
                    for i in range(
                        int(field.split("-")[0]), int(field.split("-")[1]) + 1
                    ):
                        DELETE.append(i)
                else:
                    DELETE.append(int(field))
        except ValueError:
            print(f"ror: {argument}: Invalid field selection", file=sys.stderr)
            sys.exit(1)
    elif option == "-f" or option == "--first":
        try:
            for field in argument.split(","):
                if "-" in field:
                    for i in range(
                        int(field.split("-")[0]), int(field.split("-")[1]) + 1
                    ):
                        FIRST.append(i)
                else:
                    FIRST.append(int(field))
        except ValueError:
            print(f"ror: {argument}: Invalid field selection", file=sys.stderr)
            sys.exit(1)
    elif option == "-i" or option == "--interleave":
        INTERLEAVE = True
    elif option == "-I" or option == "--deinterleave":
        INTERLEAVE = False
    elif option == "-l" or option == "--last":
        try:
            for field in argument.split(","):
                if "-" in field:
                    for i in range(
                        int(field.split("-")[0]), int(field.split("-")[1]) + 1
                    ):
                        LAST.append(i)
                else:
                    LAST.append(int(field))
        except ValueError:
            print(f"ror: {argument}: Invalid field selection", file=sys.stderr)
            sys.exit(1)
    elif option == "-r" or option == "--reverse":
        REVERSE = True
    elif option == "-s" or option == "--separator":
        SEPARATOR = argument

if stat.S_ISFIFO(os.fstat(0).st_mode):
    input_file = "-"
else:
    if not len(positional_arguments):
        print(f"ror: Missing operand", file=sys.stderr)
        sys.exit(1)
    else:
        input_file = positional_arguments.pop()

FIELDS = []
try:
    for field in positional_arguments:
        if "-" in field:
            for i in range(int(field.split("-")[0]), int(field.split("-")[1]) + 1):
                FIELDS.append(i)
        else:
            FIELDS.append(int(field))
except ValueError:
    print(f"ror: {argument}: Invalid field selection", file=sys.stderr)
    sys.exit(1)


if input_file == "-":
    all_lines = sys.stdin.read().splitlines()
else:
    if os.path.isfile(input_file):
        pass
    elif os.path.isfile(f"{os.getcwd}/{input_file}"):
        input_file = f"{os.getcwd}/{input_file}"
    elif os.path.isdir(input_file) or os.path.isdir(f"{os.getcwd}/{input_file}"):
        print(f"ror: {input_file}: Is a directory", file=sys.stderr)
        sys.exit(1)
    else:
        print(f"ror: {input_file}: No such file or directory", file=sys.stderr)
        sys.exit(1)

    with open(input_file, mode="r", encoding="utf8") as text_file:
        all_lines = text_file.read().splitlines()


if not FIELDS:
    FIELDS = range(1, max(len(line.split(SEPARATOR)) for line in all_lines) + 1)

fields = FIRST[:]

main_fields = list(
    field for field in FIELDS if (field not in fields) and (field not in LAST)
)

if REVERSE:
    main_fields = reversed(main_fields)

if INTERLEAVE:
    num_main = len(main_fields)
    if num_main % 2:
        fields.append(main_fields.pop(0))
        num_main -= 1

    num_main //= 2

    for index in range(num_main):
        fields.append(main_fields[index])
        fields.append(main_fields[num_main + index])
elif INTERLEAVE is False:
    if len(main_fields) % 2:
        fields.append(main_fields.pop(0))
    fields.extend(field for index, field in enumerate(main_fields) if not (index % 2))
    fields.extend(field for index, field in enumerate(main_fields) if index % 2)
else:
    fields.extend(main_fields)

fields.extend(LAST)

for line in all_lines:
    line = line.split(SEPARATOR)
    print(
        SEPARATOR.join(
            line[field - 1] if field <= len(line) else ""
            for field in fields
            if field not in DELETE
        )
    )

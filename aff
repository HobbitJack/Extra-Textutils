#!/usr/bin/python
# add an affix to each input line

import getopt
import stat
import os
import sys

PYTHON_EXPRESSION = False
SHELL_EXPRESSION = False
SEPARATOR = ""
SKIP_HEADER = False
SUFFIX = False
NUMBER_FROM = 0

short_options = "eEHn:sSthv"
long_options = [
    "expression",
    "shell-expr",
    "skip-header",
    "number-from=",
    "space",
    "suffix",
    "tab",
    "help",
    "version",
]

try:
    options, positional_arguments = getopt.gnu_getopt(
        sys.argv[1:], short_options, long_options
    )
except getopt.GetoptError as error:
    print(f"aff: '-{error.opt}': Option not recognized")
    sys.exit(1)

for option in options:
    argument = option[1]
    option = option[0]

    if option == "-h" or option == "--help":
        print("Usage: aff [OPTION]... [AFFIX] [FILE]")
        print("Add AFFIX to each line of input")
        print()
        print(
            "  -e, --expression             execute AFFIX as a python expression for each line"
        )
        print("                               also count up from 0 in 'i'")
        print(
            "  -E, --shell-expr             execute AFFIX as a shell command for each line"
        )
        print("                               also count up from 0 in 'I'")
        print(
            "  -H, --skip-header            do not put AFFIX on the first line of input"
        )
        print("  -n, --number-from=NUM        start counting from NUM instead of 0")
        print(
            "  -s, --space                  place a space between AFFIX and each line"
        )
        print(
            "  -S, --suffix                 treat AFFIX as a suffix rather than as a prefix"
        )
        print("  -t, --tab                    place a tab between AFFIX and each line")
        print("  -h, --help                   display this help and exit")
        print("  -v, --version                display version information and exit")
        print()
        print("For full documentation, try 'man aff'.")
        sys.exit(0)
    elif option == "-v" or option == "--version":
        print("aff (TextUtils) v2.0.2")
        print("Copyright (C) 2024 HobbitJack.")
        print(
            "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
        )
        print("This is free software: you are free to change and redistribute it.")
        print("There is NO WARRANTY, to the extent permitted by law.")
        print()
        print("Written by HobbitJack.")
        sys.exit(0)
    elif option == "-H" or option == "--skip-header":
        SKIP_HEADER = True
    elif option == "-e" or option == "--expression":
        PYTHON_EXPRESSION = True
    elif option == "-E" or option == "--shell-expe":
        SHELL_EXPRESSION = True
    elif option == "-n" or option == "--number-from":
        try:
            NUMBER_FROM = int(argument)
        except ValueError:
            print(f"aff: {argument}: Invalid starting number")
            sys.exit(1)
    elif option == "-s" or option == "--space":
        SEPARATOR = " "
    elif option == "-S" or option == "--suffix":
        SUFFIX = True
    elif option == "-t" or option == "--tab":
        SEPARATOR = "\t"

if stat.S_ISFIFO(os.fstat(0).st_mode):
    input_file = "-"
else:
    if not len(positional_arguments):
        print("aff: Missing operand")
        sys.exit(1)

    input_file = positional_arguments.pop()

if positional_arguments:
    affix = positional_arguments.pop(0)
else:
    affix = ""

if PYTHON_EXPRESSION or SHELL_EXPRESSION:
    command = affix
    i = NUMBER_FROM

if positional_arguments:
    print(f"aff: '{positional_arguments[0]}': Extra operand")
    sys.exit(1)

if input_file == "-":
    all_lines = sys.stdin.read().splitlines()
else:
    if os.path.isfile(input_file):
        pass
    elif os.path.isfile(f"{os.getcwd}/{input_file}"):
        input_file = f"{os.getcwd}/{input_file}"
    elif os.path.isdir(input_file) or os.path.isdir(f"{os.getcwd}/{input_file}"):
        print(f"aff: {input_file}: Is a directory")
        sys.exit(1)
    else:
        print(f"aff: {input_file}: No such file or directory")
        sys.exit(1)

    with open(input_file, mode="r", encoding="utf8") as text_file:
        all_lines = text_file.read().splitlines()


for line in all_lines:
    if SKIP_HEADER:
        SKIP_HEADER = False
        print(line)
        continue

    if PYTHON_EXPRESSION:
        affix = eval(command)
    elif SHELL_EXPRESSION:
        os.environ["line"] = line
        os.environ["I"] = str(i)
        affix = os.popen(command).read()[:-1]
        os.environ["line"] = ""

    i += 1
    if SUFFIX:
        print(f"{line}{SEPARATOR}{affix}")
    else:
        print(f"{affix}{SEPARATOR}{line}")
